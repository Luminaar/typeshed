import enum
import typing
from typing import Any

class CryptographyDeprecationWarning(UserWarning): ...
PersistentlyDeprecated2017 = CryptographyDeprecationWarning
PersistentlyDeprecated2019 = CryptographyDeprecationWarning
DeprecatedIn34 = CryptographyDeprecationWarning

def read_only_property(name: str) -> Any: ...
def register_interface(iface: object): ...
def int_to_bytes(integer: int, length: typing.Optional[int]=...) -> bytes: ...

class InterfaceNotImplemented(Exception): ...

def strip_annotation(signature: object): ...
def verify_interface(iface: object, klass: object, *, check_annotations: bool = ...) -> None: ...

class _DeprecatedValue:
    value: Any = ...
    message: Any = ...
    warning_class: Any = ...
    def __init__(self, value: object, message: object, warning_class: object) -> None: ...

class _ModuleWithDeprecations:
    def __init__(self, module: Any) -> None: ...
    def __getattr__(self, attr: Any): ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def __delattr__(self, attr: Any) -> None: ...
    def __dir__(self): ...

def deprecated(value: Any, module_name: Any, message: Any, warning_class: Any) -> _DeprecatedValue: ...
def cached_property(func: Any): ...

int_from_bytes: _DeprecatedValue

class Enum(enum.Enum): ...
